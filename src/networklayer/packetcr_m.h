//
// Generated file, do not edit! Created by opp_msgc 4.4 from networklayer/packetcr.msg.
//

#ifndef _PACKETCR_M_H_
#define _PACKETCR_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "packet802154_m.h"
// }}



/**
 * Enum generated from <tt>networklayer/packetcr.msg</tt> by opp_msgc.
 * <pre>
 * enum PacketType {
 *     PK_PAYLOAD_TO_AN = 0; 
 *     PK_PAYLOAD_TO_BS = 1; 
 *     PK_REQ_RELAY = 2; 
 *     PK_RELAY_INFO = 3; 
 *     PK_ENERGY_INFO = 4; 
 * };
 * </pre>
 */
enum PacketType {
    PK_PAYLOAD_TO_AN = 0,
    PK_PAYLOAD_TO_BS = 1,
    PK_REQ_RELAY = 2,
    PK_RELAY_INFO = 3,
    PK_ENERGY_INFO = 4
};

/**
 * Class generated from <tt>networklayer/packetcr.msg</tt> by opp_msgc.
 * <pre>
 * packet PacketCR extends Packet802154 {
 *     txType = TX_PPP; 
 *     int pkType; 
 *     int hopLimit = 64; 
 *     int pkSize = 20; 
 * }
 * </pre>
 */
class PacketCR : public ::Packet802154
{
  protected:
    int pkType_var;
    int hopLimit_var;
    int pkSize_var;

  private:
    void copy(const PacketCR& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PacketCR&);

  public:
    PacketCR(const char *name=NULL, int kind=0);
    PacketCR(const PacketCR& other);
    virtual ~PacketCR();
    PacketCR& operator=(const PacketCR& other);
    virtual PacketCR *dup() const {return new PacketCR(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPkType() const;
    virtual void setPkType(int pkType);
    virtual int getHopLimit() const;
    virtual void setHopLimit(int hopLimit);
    virtual int getPkSize() const;
    virtual void setPkSize(int pkSize);
};

inline void doPacking(cCommBuffer *b, PacketCR& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PacketCR& obj) {obj.parsimUnpack(b);}


#endif // _PACKETCR_M_H_
